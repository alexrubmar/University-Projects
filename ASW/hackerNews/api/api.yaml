openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "Hacker News API"

servers:
  - url: 'http://3.84.253.154:8080/'
  - url: 'https://aswproject-hackernews.herokuapp.com/'
paths:
  /users:
    get:
      tags:
      - Users
      summary: Retrieves all the Users
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
    post:
      tags:
      - Users
      summary: Posts a new user
      requestBody:
        description: Provide the data of the new user
        content:
          application/json:
            schema:
              required:
              - name
              - about
              - email
              - password
              type: object
              properties:
                name:
                  type: string
                  example: 'Sergi'
                about:
                  type: string
                  example: 'About me'
                email:
                  type: string
                  example: 'sergi@gmail.com'
                password:
                  type: string
                  example: 'password'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                  
  /users/{id}:
    get:
      tags:
      - Users
      summary: Retrieves one User
      parameters:
      - name: id
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 404
                    error:
                      type: string
                      example: "Not Found"

    put:
      tags:
      - Users
      summary: Updates a user
      parameters:
      - name: id
        in: path
        description: ID of User to modify
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Provide the new "About" and "email" fields of the user
        content:
          application/json:
            schema:
              required:
              - about
              - email
              type: object
              properties:
                about:
                  type: string
                  example: 'About me'
                email:
                  type: string
                  example: 'sergi@gmail.com'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /users/{id}/submissions:
    get:
      tags:
      - Users
      summary: Retrieves the submissions of one user
      parameters:
      - name: id
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 404
                    error:
                      type: string
                      example: "Not Found"
                      
  /users/{id}/upvoted_submissions:
    get:
      tags:
      - Users
      summary: Retrieves the upvoted submissions by one user
      parameters:
      - name: id
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 404
                    error:
                      type: string
                      example: "Not Found"
  
  /users/{id}/comments:
    get:
      tags:
      - Users
      summary: Retrieves the comments of one user
      parameters:
      - name: id
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 404
                    error:
                      type: string
                      example: "Not Found"
                      
  /users/{id}/upvoted_comments:
    get:
      tags:
      - Users
      summary: Retrieves the upvoted comments by one user
      parameters:
      - name: id
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 404
                    error:
                      type: string
                      example: "Not Found"
  
  /posts:
    get:
      tags:
      - posts
      summary: Retrieves all the Posts with URL
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
    post:
      tags:
      - posts
      summary: Creates a new Post
      requestBody:
        content:
          application/json:
            schema:
              required:
              - title
              - url
              - text
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  example: 'My title'
                url:
                  type: string
                  minLength: 0
                  example: 'My url'
                text:
                  type: string
                  minLength: 0
                  example: 'My text'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
      
                  
  /posts/index_new:
    get:
      tags:
      - posts
      summary: Retrieves all the Posts ordered by created time
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /posts/index_ask:
    get:
      tags:
      - posts
      summary: Retrieves all the Posts of type Ask
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /posts/{id}:
    get:
      tags:
      - posts
      summary: Retrieves the Post with parameter id
      parameters:
      - name: id
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /posts/{id}/like:
    post:
      tags:
      - posts
      summary: Adds a like to the post identified by id
      parameters:
      - name: id
        in: path
        description: ID of Post to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /posts/{id}/unlike:
    post:
      tags:
      - posts
      summary: Removes a like (unlike) to the post identified by id
      parameters:
      - name: id
        in: path
        description: ID of Post to unlike
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /posts/comments:
    post:
      tags:
      - comments
      summary: Creates a comment
      requestBody:
        content:
          application/json:
            schema:
              required:
              - Body
              - parent_id
              - post_id
              type: object
              properties:
                Body:
                  type: string
                  minLength: 1
                  example: 'Comment text'
                parent_id:
                  type: integer
                  example: -1
                post_id:
                  type: integer
                  example: 1
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
                  
                  
  /comments/{comment_id}/like:
    post:
      tags:
      - comments
      summary: like Comment
      parameters:
      - name: comment_id
        in: path
        description: ID of comment to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
                  
                  
                  
  /comments/{comment_id}/unlike:
    post:
      tags:
      - comments
      summary: like Comment
      parameters:
      - name: comment_id
        in: path
        description: ID of comment to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        name:
          type: string
          example: 'Compay Segundo'
        about:
          type: string
          example: 'Soy Compay Segundo y soy cantante'
        email:
          type: string
          example: 'compaysegundo@gmail.com'
        password:
          type: string
          example: '79d6edd24ae845622e1202984XXXXX'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        uid:
          type: string
          example: '113274070833634955268'
        provider:
          type: string
          example: "google_oauth2"
          
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        title:
          type: string
          example: 'Title post'
        text:
          type: string
          example: 'Post content'
        url:
          type: string
          example: 'www.thisurl.com'
        user_id:
          type: integer
          format: int64
          example: 2
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        cached_votes_total:
          type: integer
          example: 6
          
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        body:
          type: string
          example: 'Body comment'
        post_id:
          type: integer
          example: 1
        parent_id:
          type: integer
          example: -1
        user_id:
          type: integer
          format: int64
          example: 2
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          example: 'http://18.207.194.36:8080/comments/7.json'
  
    SubmissionCreate:
      type: object
      properties:
        title:
          type: string
          description: titol de la submission a crear.
        url:
          type: string
          description: URL on redireccionar.
        text:
          type: string
          description: text de la pregunta.
        
    getAllPosts:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Post'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Any error"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Post with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header
  